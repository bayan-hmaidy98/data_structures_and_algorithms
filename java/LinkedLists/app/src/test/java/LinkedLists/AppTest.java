/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.java.LinkedLists;

import main.java.LinkedLists.App;
import main.java.LinkedLists.LinkedList;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

  LinkedList linkedList = new LinkedList();
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }


  @Test
  void linkedList(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    assertEquals(9, linkedList.head.value);
    assertTrue(linkedList.includes(5));
    assertFalse(linkedList.includes(2));
    assertEquals("{ 9 } -> { 14 } -> { 20 } -> { 5 } -> NULL", linkedList.toString());

  }

  @Test void insertBeforeTest(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    linkedList.insertBefore(14,12);
    String expected = "{ 9 } -> { 12 } -> { 14 } -> { 20 } -> { 5 } -> NULL";
//    System.out.println(linkedList.toString());
    assertEquals(expected, linkedList.toString());
  }
  @Test void insertBeforeHeadTest(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    linkedList.insertBefore(9,12);
    String expected = "{ 12 } -> { 9 } -> { 14 } -> { 20 } -> { 5 } -> NULL";
//    System.out.println(linkedList.toString());
    assertEquals(expected, linkedList.toString());
  }

  @Test void insertAfterTest(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    linkedList.insertAfter(20,25);
    String expected = "{ 9 } -> { 14 } -> { 20 } -> { 25 } -> { 5 } -> NULL";
    assertEquals(expected, linkedList.toString());
  }
  @Test void insertAtTheEnd(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    linkedList.insertAfter(5,30);
    String expected = "{ 9 } -> { 14 } -> { 20 } -> { 5 } -> { 30 } -> NULL";
    assertEquals(expected, linkedList.toString());
  }

  @Test void append(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.append(13);
    String expected = "{ 20 } -> { 5 } -> { 13 } -> NULL";
    assertEquals(expected, linkedList.toString());
  }

  @Test void appendMultiple(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.append(10);
    linkedList.append(12);
    linkedList.append(38);
    String expected = "{ 20 } -> { 5 } -> { 10 } -> { 12 } -> { 38 } -> NULL";
    assertEquals(expected, linkedList.toString());
  }

  @Test void kGreater(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    String expected = "7 is not valid index";
    assertEquals(expected, linkedList.kth(7));
  }

  @Test void kEquals(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    String expected = "4 is not valid index";
    assertEquals(expected, linkedList.kth(4));
  }

  @Test void sizeOne(){
    linkedList.insert(5);
    System.out.println(linkedList.kth(0));
  }

  @Test void happyPath(){
    linkedList.insert(5);
    linkedList.insert(20);
    linkedList.insert(14);
    linkedList.insert(9);
    linkedList.insert(3);
    linkedList.insert(25);
    assertEquals(14, linkedList.kth(2));
  }

  @Test void zipListTest(){
    LinkedList list1 = new LinkedList();
    list1.append(1);
    list1.append(2);
    list1.append(3);
    LinkedList list2 = new LinkedList();
    list2.append(4);
    list2.append(5);
    list2.append(6);
    assertEquals(1, LinkedList.zipList(list1, list2));
  }

}
